Lab 1 生成deployment yaml文件

使用以下命令生成deployment的原始配置
kubectl create deployment webserver --image=nginx --dry-run=client -o yaml 

apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null # 删掉
  labels:
    app: webserver
  name: webserver
spec:
  replicas: 1 # 定义副本数量
  selector: # 通过lable定义所管理的pod
    matchLabels:
      app: webserver
  strategy: {} # 定义滚动升级的策略
  template: # 此处以下替换成pod yaml文件，注意缩进
    metadata:
      creationTimestamp: null
      labels:
        app: webserver # 使用相同的lable和deployment保持对仗工整
    spec:
      containers:
      - image: nginx
        name: nginx
        resources: {}
status: {} #删掉

做变造，并将之前的pod的最终版yaml文件整合（copy）进来，注意缩进以及Pod的label和depolyment的lable保持一致（）

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: webserver
  name: webserver
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webserver
  strategy: {}
  template:
    metadata:
      name: webserver
      namespace: default
      labels:
        app: webserver
    spec:
      dnsPolicy: Default
      hostNetwork: false
      restartPolicy: Always
      hostAliases:
      - ip: "192.168.0.181"
        hostnames:
        - "cka01"
        - "cka-master"
      - ip: "192.168.0.41"
        hostnames:
        - "cka02"
      - ip: "192.168.0.241"
        hostnames:
        - "cka03"
      volumes:
      - name: web-root
        hostPath:
          path: /data
      - name: web-path
        emptyDir: 
      initContainers:
      - name: pullcode
        image: busybox
        volumeMounts:
        - name: web-path
          mountPath: /data
        command:
        - /bin/sh
        - -c
        - "echo hello > /data/index.html; touch /data/healthy"
      containers:
      - name: nginx
        image: nginx:1.7.9
        imagePullPolicy: Always
        resources:
          requests:
            cpu: "0.1"
            memory: "32Mi"
          limits:
            cpu: "0.2"
            memory: "64Mi"
        startupProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - "cat /usr/share/nginx/html/healthy"
          initialDelaySeconds: 5 
          periodSeconds: 1
          timeoutSeconds: 1
          failureThreshold: 18
          successThreshold: 1 
        livenessProbe:
          tcpSocket:
            port: 80
          periodSeconds: 10
          timeoutSeconds: 1
          failureThreshold: 3
          successThreshold: 1 
        readinessProbe:
          httpGet:
            port: 80
            path: /
          periodSeconds: 1
          timeoutSeconds: 1
          failureThreshold: 3
          successThreshold: 1 
        volumeMounts:
        - name: web-root
          mountPath: /data
        - name: web-path
          mountPath: /usr/share/nginx/html
        env:
        - name: mysqlhost
          value: "10.96.0.110"
        - name: mysqlport
          value: "3306"
        - name: mysqldb
          value: "wordpress"
        ports:
        - name: web-port
          containerPort: 80
          protocol: TCP

使用示例文件创建yaml文件
nano deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: webserver
  name: webserver
spec:
  replicas: 1 # 定义副本数量
  selector: # 通过lable定义所管理的pod
    matchLabels:
      app: webserver
  strategy: {} # 定义滚动升级的策略
  template: # 此处以下替换成pod yaml文件，注意缩进
    metadata:
      creationTimestamp: null
      labels:
        app: webserver # 使用相同的lable和deployment保持对仗工整
    spec:
      containers:
      - image: nginx:1.7.9
        name: nginx
        resources: {}

创建deployment
kubectl apply -f deployment.yaml

查看deployment列表
kubectl get deployment -o wide

查看deployment细节
kubectl describe deployment webserver

kubectl get deployment -o yaml

查看pod
kubectl get pod -o wide

删除某个pod
kubectl delete pod webserver-cd448c495-7z9mx

观测pod重建过程
kubectl get pod -o wide

编辑deployment，将副本数调整成5个
KUBE_EDITOR="nano" kubectl edit deployment webserver

观测pod横向扩展过程
kubectl get pod -o wide

编辑deployment，将副本数调整成1个
KUBE_EDITOR="nano" kubectl edit deployment webserver

观测pod横向收缩过程
kubectl get pod -o wide

使用命令进行扩展
kubectl scale deployment webserver --replicas=3

观测pod横向扩展过程
kubectl get pod -o wide -w 

删除deployment
kubectl delete -f deployment.yaml 

Lab 2 deployment的滚动更新策略

使用示例文件创建yaml文件
nano webserver-strategy.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: webserver-strategy
  name: webserver-strategy
spec:
  replicas: 6
  selector:
    matchLabels:
      app: webserver-strategy
  strategy:
    type: RollingUpdate
    rollingUpdate:  # 滚动更新策略
      maxUnavailable: 0 # 先下线两个
      maxSurge: 2
  template:
    metadata:
      name: webserver
      namespace: default
      labels:
        app: webserver-strategy
    spec:
      containers:
      - image: nginx:1.7.9
        name: nginx
        resources: {}


创建deployment
kubectl apply -f webserver-strategy.yaml 

查看deployment列表,关注pod节点数映像版本信息
kubectl get deployment -o wide

查看deployment细节，确定目前的deployment的滚动更新策略：RollingUpdateStrategy
kubectl describe deployment webserver-strategy

修改deployment配置，将映像版本提升到1.8
kubectl set image deployment webserver-strategy nginx=nginx:1.8

观察pod滚动升级过程
kubectl get pod -o wide -w 

查看deployment列表,重点关注映像版本信息
kubectl get deployment -o wide

修改deployment滚动升级配置，配置为以下设置
nano webserver-strategy.yaml
      maxSurge: 2 #先上线两个
      maxUnavailable: 0

更新deployment
kubectl apply -f webserver-strategy.yaml 

查看deployment细节，确定目前的deployment的滚动更新策略
kubectl describe deployment webserver-strategy

修改deployment配置，将映像版本提升到1.9.1
kubectl set image deployment webserver-strategy nginx=nginx:1.9.1

观测pod滚动升级过程
kubectl get pod -o wide -w 

查看版本历史信息
kubectl rollout history deployment/webserver-strategy

查看历史版本
kubectl rollout history deployment/webserver-strategy  --revision=3

kubectl rollout history deployment/webserver-strategy  --revision=2

回滚到ver 2版本
kubectl rollout undo deployment/webserver-strategy --to-revision=2

验证回滚结果
kubectl get deployment -o wide

删除deployment
kubectl delete -f webserver-strategy.yaml

Lab 3 StatefulSet

使用示例文件创建yaml文件
nano webserver.yaml

apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: webserver
  name: webserver
spec:
  serviceName: webserver
  replicas: 3
  selector:
    matchLabels:
      app: webserver
  template:
    metadata:
      name: webserver
      namespace: default
      labels:
        app: webserver
    spec:
      containers:
      - name: nginx
        image: nginx:1.7.9
        resources: {}


创建StatefulSet
kubectl apply -f webserver.yaml

查看pod创建过程
kubectl get pod -o wide -w
  *关注pod的名称和ip地址

查看StatefulSet
kubectl get sts -o wide

kubectl get sts -o yaml

查看StatefulSet细节
kubectl describe sts webserver
  *关注UpdateStrategy

修改StatefulSet配置，将映像版本提升到1.9.1
kubectl set image sts webserver nginx=nginx:1.9.1

观测pod滚动升级过程
kubectl get pod -o wide -w 

删除StatefulSet
kubectl delete -f webserver.yaml

Lab 4 Job和CornJob

使用示例文件创建yaml文件
nano job.yaml

apiVersion: batch/v1
kind: Job
metadata:
  name: pi
spec:
  template:
    spec:
      containers:
      - name: pi
        image: resouer/ubuntu-bc 
        command: ["sh", "-c", "echo 'scale=1000; 4*a(1)' | bc -l "]
      restartPolicy: Never
  backoffLimit: 4

创建job
kubectl create -f job.yaml

观察对应的pod，几秒之后运算结束，pod会进入到completed状态
kubectl get pod -o wide

查看运算结果
kubectl logs pi-xxx

查看job对象
kubectl describe jobs/pi

查看jobs
kubectl get jobs -o wide

删除job
kubectl delete -f job.yaml

使用示例文件创建yaml文件
nano cronjob.yaml

apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: hello
spec:
  schedule: "*/1 * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: hello
            image: busybox
            args:
            - /bin/sh
            - -c
            - date; echo Hello from the Kubernetes cluster
          restartPolicy: OnFailure

创建cornjob
kubectl create -f cronjob.yaml

查看pods
kubectl get pod -o wide

每隔一分钟执行一次查看jobs
kubectl get jobs -o wide

查看cronjob
kubectl get cronjob hello

删除cornjob
kubectl delete -f cronjob.yaml


