克隆实验脚本

git clone https://github.com/cloudzun/k8slab/

cd k8slab/

git branch -a

git checkout v1.23

Lab 1 极简创建Pod

使用命令行创建pod，注意两个必须的属性名称和映像
kubectl run nginx --image=nginx

查看pod
kubectl get pods

观测其他属性，比如ip地址，所在节点
kubectl get pods -o wide 

删除现有pod，准备另起炉灶
kubectl delete pod nginx

查看yaml样例
kubectl run nginx --image=nginx --dry-run=client -o yaml

apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: nginx
  name: nginx
spec:
  containers:
  - image: nginx
    name: nginx
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}

查看kind定义
kubectl api-resources

查看version定义
kubectl explain pods

创建yaml文件，使用最简配置
nano nginx.yaml

apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  containers:
  - name: nginx
    image: nginx

创建pod
kubectl apply -f nginx.yaml

查看pod
kubectl get pod -o wide

使用pod ip地址访问pod
curl 10.244.60.7

查看pod详细信息
kubectl describe pod nginx
 *分段查看重点字段内容

查看pod yaml文件
kubectl get pods -o yaml

进入pod中的容器（亦可使用/bin/sh）
kubectl exec -it nginx -- /bin/bash

在容器上下文里查看DNS地址
cat /etc/resolv.conf 

退出容器上下文
exit

查看pod日志
kubectl logs nginx

加参数查看滚动日志
kubectl  logs -f  nginx


Lab 2 创建多容器pod

使用示例文件创建yaml文件
nano many-pods.yaml

apiVersion: v1
kind: Pod
metadata:
  name: many-pods
spec:
  containers:
  - name: nginx
    image: nginx
  - name: redis # 多容器
    image: redis
  - name: memcached # 多容器
    image: memcached

创建pod
kubectl apply -f many-pods.yaml

查看pod
kubectl get pods

查看pod详细信息
kubectl describe pod many-pods

进入pod中的容器
kubectl exec -it many-pods -- /bin/bash
 *因为没有指定容器名字，因此进入的是第一个容器

退出nginx容器上下文
exit

加-c参数进入redis容器
kubectl exec -it many-pods -c redis -- /bin/bash

在redis容器上下文执行redis-cli
redis-cli

退出redis容器上下文，需执行两次
exit

加-c参数进入memcached容器
kubectl exec -it many-pods -c memcached -- /bin/bash

在memcached容器上下文执行命令
memcached --help

退出memcache容器上下文
exit

清理pod
kubectl delete -f many-pods.yaml 


Lab 3 定义pod的DNS

使用示例文件创建yaml文件
nano nginx-dns.yaml

apiVersion: v1
kind: Pod
metadata:
  name: nginx-dns
spec:
  dnsPolicy: Default # 和宿主机的DNS配置相同
  containers:
  - name: nginx
    image: nginx

创建pod
kubectl apply -f nginx-dns.yaml 

进入pod中的容器
kubectl exec -it nginx-dns /bin/bash

查看容器内的DNS设置
cat /etc/resolv.conf   

退出容器上下文
exit

查看nginx pod的dns设置
kubectl exec -it nginx /bin/bash

cat /etc/resolv.conf  

exit

查看host本机DNS，和上述容器的DNS设置进行对比
cat /etc/resolv.conf   

清理pod
kubectl delete -f nginx-dns.yaml 


Lab 4 定义pod的监听端口

使用示例文件创建yaml文件
nano nginx-ports.yaml

apiVersion: v1
kind: Pod
metadata:
  name: nginx-ports
spec:
  dnsPolicy: Default
  containers:
  - name: nginx
    image: nginx
    ports:
    - name: web-port
      containerPort: 80 # 容器暴露的端口
      protocol: TCP
      hostPort: 80 # 主机监听端口

创建pod
kubectl apply -f nginx-ports.yaml 

查看pod
kubectl get pods -o wide

观察该pod运行在那个node上，使用nodeip进行访问
curl http://nodeip

清理pod
kubectl delete -f nginx-ports.yaml 
  *监听端口会和后续实验冲突，建议清理


Lab 5 定义映像拉取策略

使用示例文件创建yaml文件
nano nginx-imagePullPolicy.yaml

apiVersion: v1
kind: Pod
metadata:
  name: nginx-imagepullpolicy
spec:
  dnsPolicy: Default
  containers:
  - name: nginx
    image: nginx
    imagePullPolicy: Always # 拉取策略
    ports:
    - name: web-port
      containerPort: 80
      protocol: TCP
      hostPort: 80 

创建pod
kubectl apply -f nginx-imagePullPolicy.yaml 

查看pod
kubectl get pods -o wide

清理pod
kubectl delete -f nginx-imagePullPolicy.yaml 


Lab 6 注入环境变量

查看本机环境变量
env

进入nginx pod中的容器
kubectl exec -it nginx -- /bin/bash

查看容器的环境变量
env
 *查看变量的格式

退出容器上下文
exit

使用示例文件创建yaml文件
nano nginx-env.yaml

apiVersion: v1
kind: Pod
metadata:
  name: nginx-env
spec:
  dnsPolicy: Default
  containers:
  - name: nginx
    image: nginx
    imagePullPolicy: Always
    env: # 环境变量
    - name: mysqlhost
      value: "10.96.0.110"
    - name: mysqlport
      value: "3306"
    - name: mysqldb
      value: "wordpress"
    ports:
    - name: web-port
      containerPort: 80
      protocol: TCP

创建pod
kubectl apply -f nginx-env.yaml 

进入pod中的容器
kubectl exec -it nginx-env -- /bin/bash

查看容器的环境变量
env
 *验证环境变量

退出容器上下文
exit

清理pod
kubectl delete -f nginx-env.yaml 


Lab 7 定义pod执行的任务
查看nginx的Dockefile，着重查看最后一行
CMD ["nginx", "-g", "daemon off;"]

进入 nginx pod中的容器
kubectl exec -it nginx -- /bin/bash

安装procps
apt update
apt install -y procps

查看nginx的启动参数
ps -ef 

退出容器上下文
exit

使用示例文件创建yaml文件
nano nginx-args.yaml

apiVersion: v1
kind: Pod
metadata:
  name: nginx-args
  namespace: default
  labels:
    app: nginx-args
spec:
  dnsPolicy: Default
  containers:
  - name: nginx
    image: nginx
    imagePullPolicy: Always
    command: #启动参数
    - sleep 
    args:
    - "3600"
    env:
    - name: mysqlhost
      value: "10.96.0.110"
    - name: mysqlport
      value: "3306"
    - name: mysqldb
      value: "wordpress"
    ports:
    - name: web-port
      containerPort: 80
      protocol: TCP

创建pod
kubectl apply -f nginx-args.yaml 

进入 nginx-env pod中的容器
kubectl exec -it nginx-args -- /bin/bash

安装procps，如果速度慢，可以根据备注中的提示换源
apt update
apt install procps

查看nginx的启动参数
ps -ef 

退出容器上下文
exit

清理pod
kubectl delete -f  nginx-args.yaml 


Lab 8 增加标签和注解

使用示例文件创建yaml文件
nano nginx-annotation.yaml

apiVersion: v1
kind: Pod
metadata:
  name: nginx-annotation
  namespace: default
  labels:
    app: nginx-annotation # 标签
  annotations:
    app: nginx-annotation # 注解
spec:
  dnsPolicy: Default
  containers:
  - name: nginx
    image: nginx
    imagePullPolicy: Always
    command:
    - sleep 
    args:
    - "3600"
    env:
    - name: mysqlhost
      value: "10.96.0.110"
    - name: mysqlport
      value: "3306"
    - name: mysqldb
      value: "wordpress"
    ports:
    - name: web-port
      containerPort: 80
      protocol: TCP

创建pod
kubectl apply -f nginx-annotation.yaml

查看pod，重点关注标签和注解
kubectl describe pod nginx-annotation

清理pod
kubectl delete -f nginx-annotation.yaml 


Lab 9 使用主机网络

使用示例文件创建yaml文件
nano nginx-hostnetwork.yaml

apiVersion: v1
kind: Pod
metadata:
  name: nginx-hostnetwork
  namespace: default
  labels:
    app: nginx-hostnetwork
  annotations:
    app: nginx-hostnetwork
spec:
  dnsPolicy: Default
  hostNetwork: true # 使用主机网络
  containers:
  - name: nginx
    image: nginx
    imagePullPolicy: Always
    command:
    - sleep 
    args:
    - "3600"
    env:
    - name: mysqlhost
      value: "10.96.0.110"
    - name: mysqlport
      value: "3306"
    - name: mysqldb
      value: "wordpress"
    ports:
    - name: web-port
      containerPort: 80
      protocol: TCP

创建pod
kubectl apply -f nginx-hostnetwork.yaml 

查看pod
kubectl get pod -o wide
 *如果pod无法创建成功，请检查端口冲突

# 删除端口冲突的pod（可选）
# kubectl delete pod nginx-ports

再次查看pod
kubectl get pod -o wide
 *端口冲突解除，pod创建成功，重点关注pod的ip地址

查看kubernetes网络配置
nano kubeadm-config.yaml 
 *查看podSubnet字段

清理pod
kubectl delete -f nginx-hostnetwork.yaml


Lab 10 定义pod volume：hostpath

使用示例文件创建yaml文件
nano nginx-volume-hostpath.yaml

apiVersion: v1
kind: Pod
metadata:
  name: nginx-volume-hostpath
  namespace: default
  labels:
    app: nginx-volume-hostpath
  annotations:
    app: nginx-volume-hostpath
spec:
  dnsPolicy: Default
  hostNetwork: false
  restartPolicy: Always
  volumes: # 定义卷
  - name: web-root
    hostPath:
      path: /data
  containers:
  - name: nginx
    image: nginx
    imagePullPolicy: Always
    volumeMounts: # 挂接卷
    - name: web-root
      mountPath: /data
    command:
    - sleep 
    args:
    - "3600"
    env:
    - name: mysqlhost
      value: "10.96.0.110"
    - name: mysqlport
      value: "3306"
    - name: mysqldb
      value: "wordpress"
    ports:
    - name: web-port
      containerPort: 80
      protocol: TCP

创建pod
kubectl apply -f nginx-volume-hostpath.yaml

进入pod中的容器
kubectl exec -it nginx-volume-hostpath -- /bin/bash

查看路径
df -hT
 *重点关注 /data 目录

尝试创建文件
cd /data/
touch aaa
touch bbb
echo "abraham is here" > ccc
ls 

退出容器上下文
exit

查看pod
kubectl get pod -o wide
*关注pod所在的节点

在上述节点上下文中执行以下操作查看文件
cd /data/
ls
cat ccc

排空pod所在节点
kubectl drain k8s02 --ignore-daemonsets --force

重新创建pod
kubectl apply -f nginx-volume-hostpath.yaml 

再次进入pod中的容器
kubectl exec -it nginx-volume-hostpath -- /bin/bash

查看路径
df -hT
 *重点关注 /data 目录

查看文件
cd /data/
ls
 *荡然无存

退出容器上下文
exit

清理pod
kubectl delete -f nginx-volume-hostpath.yaml 

恢复此前被排空的节点
kubectl uncordon cka-0003

确认节点状态
kubectl get node -o wide


Lab 11 定义pod volume：emptyDir

使用示例文件创建yaml文件
nano nginx-volume-emptydir.yaml

apiVersion: v1
kind: Pod
metadata:
  name: nginx-volume-emptydir
  namespace: default
  labels:
    app: nginx-volume-emptydir
  annotations:
    app: nginx-volume-emptydir
spec:
  dnsPolicy: Default
  hostNetwork: false
  restartPolicy: Always
  volumes:
  - name: web-root
    hostPath:
      path: /data
  - name: web-path # 不用定义本地路径
    emptyDir: 
  containers:
  - name: nginx
    image: nginx
    imagePullPolicy: Always
    volumeMounts:
    - name: web-root
      mountPath: /data
    - name: web-path # 挂接emptyDir
      mountPath: /www
    command:
    - sleep 
    args:
    - "3600"
    env:
    - name: mysqlhost
      value: "10.96.0.110"
    - name: mysqlport
      value: "3306"
    - name: mysqldb
      value: "wordpress"
    ports:
    - name: web-port
      containerPort: 80
      protocol: TCP

创建pod
kubectl apply -f nginx-volume-emptydir.yaml 

查看pod
kubectl get pod -o wide
*确认pod所在的节点

进入pod中的容器
kubectl exec -it nginx-volume-emptydir -- /bin/bash

查看路径
df -hT
 *看不到此前定义的www目录

尝试盲操作进入www目录，并创建文件
cd /www/
touch aaa
ls

退出容器上下文
exit

删除并重新创建pod
kubectl delete -f nginx-volume-emptydir.yaml
kubectl apply -f nginx-volume-emptydir.yaml 

查看pod
kubectl get pod -o wide
*确认pod所在的节点没有变化

再次进入pod中的容器
kubectl exec -it nginx-volume-emptydir -- /bin/bash

尝试进入WWW目录，并查看文件列表
cd /www/
ls
 *都是空的所以这个故事告诉我们emptyDir就是一场空

退出容器上下文
exit

清理 pod
kubectl delete -f nginx-volume-emptydir.yaml


Lab 12 使用initcontainer执行初始化作业

使用示例文件创建yaml文件
nano nginx-initcontainer.yaml

apiVersion: v1
kind: Pod
metadata:
  name: nginx-initcontainer
  namespace: default
  labels:
    app: nginx-initcontainer
  annotations:
    app: nginx-initcontainer
spec:
  dnsPolicy: Default
  hostNetwork: false
  restartPolicy: Always
  volumes:
  - name: web-root
    hostPath:
      path: /data
  - name: web-path # 定义emptyDir
    emptyDir: 
  initContainers:  # 定义initContainers
  - name: pullcode
    image: busybox # initContainer使用的映像
    volumeMounts:
    - name: web-path # initContainers挂接emptyDir
      mountPath: /data
    command:
    - /bin/sh
    - -c
    - "echo hello > /data/index.html"
  containers:
  - name: nginx
    image: nginx
    imagePullPolicy: Always
    volumeMounts:
    - name: web-root
      mountPath: /data
    - name: web-path # 主容器挂接emptyDir
      mountPath: /usr/share/nginx/html
    env:
    - name: mysqlhost
      value: "10.96.0.110"
    - name: mysqlport
      value: "3306"
    - name: mysqldb
      value: "wordpress"
    ports:
    - name: web-port
      containerPort: 80
      protocol: TCP

创建pod
kubectl apply -f nginx-initcontainer.yaml 

查看pod详细信息
kubectl describe pod nginx-initcontainer
 *确定容器的启动和执行

查看pod
kubectl get pod -o wide
 *确定容器的ip地址

访问pod
curl http://podip

进入pod中的容器
kubectl exec -it nginx-initcontainer -- /bin/bash

在pod上下文中检查初始化过程注入的文件
cd /usr/share/nginx/html/
ls
cat index.html 
 *此处应该有hello

退出容器上下文
exit

尝试查看initcontainer的日志
kubectl logs nginx-initcontainer pullcode
 *因为场景过于简单，此处为空

清理pod
kubectl delete -f nginx-initcontainer.yaml 

Lab 13 设置主机host

使用示例文件创建yaml文件
nano nginx-hostaliases.yaml

apiVersion: v1
kind: Pod
metadata:
  name: nginx-hostaliases
  namespace: default
  labels:
    app: nginx-hostaliases
  annotations:
    app: nginx-hostaliases
spec:
  dnsPolicy: Default
  hostNetwork: false
  restartPolicy: Always
  hostAliases:
  - ip: "192.168.0.181"
    hostnames:
    - "cka01"
    - "cka-master"
  - ip: "192.168.0.41"
    hostnames:
    - "cka02"
  - ip: "192.168.0.241"
    hostnames:
    - "cka03"
  volumes:
  - name: web-root
    hostPath:
      path: /data
  - name: web-path
    emptyDir: 
  initContainers:
  - name: pullcode
    image: busybox
    volumeMounts:
    - name: web-path
      mountPath: /data
    command:
    - /bin/sh
    - -c
    - "echo hello > /data/index.html"
  containers:
  - name: nginx
    image: nginx
    imagePullPolicy: Always
    volumeMounts:
    - name: web-root
      mountPath: /data
    - name: web-path
      mountPath: /usr/share/nginx/html
    env:
    - name: mysqlhost
      value: "10.96.0.110"
    - name: mysqlport
      value: "3306"
    - name: mysqldb
      value: "wordpress"
    ports:
    - name: web-port
      containerPort: 80
      protocol: TCP

创建pod
kubectl apply -f nginx-hostaliases.yaml

进入pod中的容器，并查看host
kubectl exec -it nginx-hostaliases -- /bin/bash

cat /etc/hosts

退出容器上下文
exit

作为对比，进入到另一个pod中的容器，并查看host
kubectl exec -it nginx -- /bin/bash
cat /etc/hosts

退出容器上下文
exit

清理pod
kubectl delete -f nginx-hostaliases.yaml 


Lab 14 设置pod资源

使用示例文件创建yaml文件
nano nginx-resources.yaml

apiVersion: v1
kind: Pod
metadata:
  name: nginx-resources
  namespace: default
  labels:
    app: nginx-resources
  annotations:
    app: nginx-resources
spec:
  dnsPolicy: Default
  hostNetwork: false
  restartPolicy: Always
  hostAliases:
  - ip: "192.168.0.181"
    hostnames:
    - "cka01"
    - "cka-master"
  - ip: "192.168.0.41"
    hostnames:
    - "cka02"
  - ip: "192.168.0.241"
    hostnames:
    - "cka03"
  volumes:
  - name: web-root
    hostPath:
      path: /data
  - name: web-path
    emptyDir: 
  initContainers:
  - name: pullcode
    image: busybox
    volumeMounts:
    - name: web-path
      mountPath: /data
    command:
    - /bin/sh
    - -c
    - "echo hello > /data/index.html"
  containers:
  - name: nginx
    image: nginx
    imagePullPolicy: Always
    resources:  # 定义资源使用
      requests: # 下限
        cpu: "0.1"
        memory: "32Mi"
      limits: # 上限
        cpu: "0.2"
        memory: "64Mi"
    volumeMounts:
    - name: web-root
      mountPath: /data
    - name: web-path
      mountPath: /usr/share/nginx/html
    env:
    - name: mysqlhost
      value: "10.96.0.110"
    - name: mysqlport
      value: "3306"
    - name: mysqldb
      value: "wordpress"
    ports:
    - name: web-port
      containerPort: 80
      protocol: TCP

创建pod
kubectl apply -f nginx-resources.yaml 

查看pod详细信息
kubectl describe pod nginx-resources
 *关注QoSClass定义

查看另一个pod详细信息
kubectl describe pod nginx
 *关注QoSClass定义

清理pod
kubectl delete -f nginx-resources.yaml 

Lab 15 静态Pod

查看kube-system里的pod
kubectl get pods -n kube-system -o wide

get pods -n kube-system -o wide | grep cka-0001
 *重点关注四个组件对应的pod

查看静态pod的yaml文件
cd /etc/kubernetes/manifests/
ls

分析其中某个yaml
nano kube-apiserver.yaml

查看pod和nod的信息
kubectl get node -o wide

kubectl get pod -o wide

退出当前目录，将某个yaml文件拷贝到另一个节点中
cd
scp nginx.yaml node3:/etc/kubernetes/manifests/

查看新启动的静态pod
kubectl get pods  -o wide

尝试删除静态pod
kubectl delete pod nginx-node3

查看pod列表，证明是无法删除的
kubectl get pod -o wide

切换到静态pod所在节点，通过删除yaml文件的方式进行删除
cd /etc/kubernetes/manifests/

rm nginx.yaml


Lab 16 pod健康检查

使用示例文件创建yaml文件
nano nginx-healthcheck-readinessprobe.yaml

apiVersion: v1
kind: Pod
metadata:
  name: nginx-readinessprobe
  namespace: default
  labels:
    app: nginx-readinessprobe
  annotations:
    app: nginx-readinessprobe
spec:
  dnsPolicy: Default
  hostNetwork: false
  restartPolicy: Always
  hostAliases:
  - ip: "192.168.0.181"
    hostnames:
    - "cka01"
    - "cka-master"
  - ip: "192.168.0.41"
    hostnames:
    - "cka02"
  - ip: "192.168.0.241"
    hostnames:
    - "cka03"
  volumes:
  - name: web-root
    hostPath:
      path: /data
  - name: web-path
    emptyDir: 
  initContainers:
  - name: pullcode
    image: busybox
    volumeMounts:
    - name: web-path
      mountPath: /data
    command:
    - /bin/sh
    - -c
    - "echo hello > /data/index.html; touch /data/healthy"
  containers:
  - name: nginx
    image: nginx
    imagePullPolicy: Always
    resources:
      requests:
        cpu: "0.1"
        memory: "32Mi"
      limits:
        cpu: "0.2"
        memory: "64Mi"
    startupProbe: # 启动检查，脚本探活
      exec:
        command:
          - /bin/sh
          - -c
          - "cat /usr/share/nginx/html/healthy"
      initialDelaySeconds: 5 
      periodSeconds: 1
      timeoutSeconds: 1
      failureThreshold: 18
      successThreshold: 1 
    livenessProbe:  # 存活检查，端口探活
      tcpSocket:
        port: 8080
      periodSeconds: 10
      timeoutSeconds: 1
      failureThreshold: 3
      successThreshold: 1 
    readinessProbe: # 就绪检查，路径探活
      httpGet:
        port: 8080
        path: /
      periodSeconds: 1
      timeoutSeconds: 1
      failureThreshold: 3
      successThreshold: 1 
    volumeMounts:
    - name: web-root
      mountPath: /data
    - name: web-path
      mountPath: /usr/share/nginx/html
    env:
    - name: mysqlhost
      value: "10.96.0.110"
    - name: mysqlport
      value: "3306"
    - name: mysqldb
      value: "wordpress"
    ports:
    - name: web-port
      containerPort: 80
      protocol: TCP

创建pod
kubectl apply -f nginx-healthcheck-readinessprobe.yaml 

查看pod
kubectl get pod -o wide
 *多查看几次，可以观测到pod有重启现象

查看pod详细信息
kubectl describe pod nginx-readinessprobe
 *可以观察到Liveness和Readiness都有报错

删除pod 
kubectl delete -f nginx-healthcheck-readinessprobe.yaml 

修改yaml文件
nano nginx-healthcheck-readinessprobe.yaml
 *将livenessProbe的端口号改为80

重新创建pod
kubectl apply -f nginx-healthcheck-readinessprobe.yaml 

查看pod
kubectl get pod -o wide
 *多查看几次，pod虽然不再重启，但是一直未能就绪

查看pod详细信息
kubectl describe pod nginx-readinessprobe
 *可以观察到Readiness还有报错

删除pod 
kubectl delete -f nginx-healthcheck-readinessprobe.yaml 

修改yaml文件
nano nginx-healthcheck-readinessprobe.yaml
 *将readinessProbe的端口号改为80

重新创建pod
kubectl apply -f nginx-healthcheck-readinessprobe.yaml 

查看pod
kubectl get pod -o wide
 *pod应该很快完全就绪

查看pod详细信息
kubectl describe pod nginx-readinessprobe
 *除了查看Events中没有报错信息之外，重点查看Condition中各个阶段是否都已经Ready

 清理pod
 kubectl delete -f nginx-healthcheck-readinessprobe.yaml 



备注
1.语法查询

查询pods语法
kuectl explain pods

查询pods详细语法
kubectl explain pods --recursive

kubectl explain pods --recursive | more 


2. kubectl 开机自启

systemctl start kubelet;sudo yum install -y nano

sudo systemctl start kubelet && sudo systemctl enable kubelet


3. 换源，使用清华大学debian源

cat > /etc/apt/sources.list << EOF 

deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free
# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free
deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free
# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free
deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free
# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free
deb https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free
# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free

EOF





 






































